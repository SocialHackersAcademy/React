{"version":3,"sources":["logo.svg","loading.gif","App.js","serviceWorker.js","components/WeatherD.js","components/Search.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","WeatherD","props","City","CountryID","Weather","WD","Mint","Maxt","Location","Search","onSubmit","submitHandler","for","type","name","id","placeholder","required","ReactDOM","render","document","getElementById","Home","handleSubmit","e","preventDefault","setState","isSearching","getData","querySelector","value","toLowerCase","state","city","q","error","search","setTimeout","fetch","process","then","response","json","data","cod","message","Error","console","table","catch","err","this","class","sys","country","weather","main","description","temp_min","temp_max","coord","lon","lat","require","React","Component","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,2FCA3CD,EAAOC,QAAU,IAA0B,qC,yICyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAmBeC,EAnBE,SAACC,GAEd,OACE,oCACA,4BAAI,2BAAIA,EAAMC,KAAV,QAAuBD,EAAME,YACjC,6BACA,6BACA,4BAAKF,EAAMG,SACX,4BAAKH,EAAMI,IACX,6BACA,6BACA,yCAAeJ,EAAMK,MACrB,6BACA,yCAAeL,EAAMM,MACrB,6BACA,yCAAeN,EAAMO,YCHZC,EAXA,SAACR,GAEZ,OACE,0BAAMS,SAAUT,EAAMU,eACrB,2BAAOC,IAAI,UACT,2BAAOC,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,YAAY,sBAAsBC,UAAQ,IADzF,OAEE,4BAAQJ,KAAK,UAAb,aCFTK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S,IAE3CC,E,YACJ,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAQRsB,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,SAAS,CAACC,aAAY,IAC3B,EAAKC,QAAQJ,EAAE/B,OAAOoC,cAAc,WAAWC,MAAMC,gBAVrD,EAAKC,MAAQ,CACXL,aAAY,EACZM,KAAK,GACLC,EAAE,YACFC,MAAM,IANS,E,qEAcXC,GAAS,IAAD,OACfC,YAAW,WACVC,MAAM,+CAAD,OAAgDF,EAAhD,kBAAgEG,qCACpEC,MAAK,SAACC,GAAc,OAAOA,EAASC,UACpCF,MAAK,SAACG,GACL,GAAgB,OAAZA,EAAKC,IAKL,MADA,EAAKlB,SAAS,CAACC,aAAY,EAAMQ,MAAMQ,EAAKE,UACtC,IAAIC,MAAJ,UAAaH,EAAKE,UAJxB,EAAKnB,SAAS,CAACC,aAAY,EAAMM,KAAKU,EAAMR,MAAM,KAClDY,QAAQC,MAAM,EAAKhB,MAAMC,SAM9BgB,OAAM,SAASC,GACZH,QAAQZ,MAAMe,QAEhB,O,0CAGFC,KAAKvB,QAAQuB,KAAKnB,MAAME,K,+BAEhB,IAAD,EAC4BiB,KAAKnB,MAAjCG,EADA,EACAA,MAAOF,EADP,EACOA,KAAMN,EADb,EACaA,YACpB,OACE,yBAAKyB,MAAM,YACT,oDACA,6BACA,6BACA,kBAAC,EAAD,CAAQzC,cAAewC,KAAK5B,eAC5B,6BACEI,EAAwE,CAAW,KAAVQ,EAAgB,kBAAC,EAAD,CAAUjC,KAAM+B,EAAKnB,KAAMX,UAAW8B,EAAKoB,IAAIC,QAASlD,QAAS6B,EAAKsB,QAAQ,GAAGC,KAAMnD,GAAI4B,EAAKsB,QAAQ,GAAGE,YAAanD,KAAM2B,EAAKuB,KAAKE,SAAUnD,KAAM0B,EAAKuB,KAAKG,SAAUnD,SAAUyB,EAAK2B,MAAMC,IAAI,KAAK5B,EAAK2B,MAAME,MAAY,4BAAK3B,IAAhT,yBAAK9C,IAAK0E,EAAQ,IAAkBhD,GAAG,kB,GA7C7CiD,IAAMC,WAmDzB/C,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SHuE5C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.af960654.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.dff7c35f.gif\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nconst WeatherD = (props) => {\n\n    return (\n      <>\n      <h1><b>{props.City},&nbsp;{props.CountryID}</b></h1>\n      <br />\n      <br />\n      <h2>{props.Weather}</h2>\n      <h3>{props.WD}</h3>\n      <br />\n      <br />\n      <h4>Min temp: {props.Mint}</h4>\n      <br />\n      <h4>Max temp: {props.Maxt}</h4>\n      <br />\n      <h4>Location: {props.Location}</h4>\n      </>\n    )\n}\nexport default WeatherD;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Search = (props) => {\n\n    return (\n      <form onSubmit={props.submitHandler}>\n       <label for=\"search\">\n         <input type=\"text\" name=\"search\" id=\"search\" placeholder=\"Enter the city name\" required />&nbsp;\n         <button type=\"submit\">Submit</button>\n       </label>\n      </form>\n    );\n}\nexport default Search;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WeatherD from './components/WeatherD';\nimport Search from './components/Search';\nReactDOM.render(<App />, document.getElementById('root'));\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isSearching:false,\n      city:{},\n      q:'amsterdam',\n      error:''\n    }\n  }\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({isSearching:false});\n    this.getData(e.target.querySelector(\"#search\").value.toLowerCase());\n  }\n  getData(search) {\n   setTimeout(() => {\n    fetch(`//api.openweathermap.org/data/2.5/weather?q=${search}&appid=${process.env.REACT_APP_OW_KEY}`)\n    .then((response) => {return response.json()})\n    .then((data) => {\n      if (data.cod != '404') {\n          this.setState({isSearching:true, city:data, error:''});\n          console.table(this.state.city);\n      } else {\n          this.setState({isSearching:true, error:data.message});\n          throw new Error(`${data.message}`);\n      }\n    })\n    .catch(function(err) {\n        console.error(err);\n    })\n   }, 1000);\n  }\n  componentDidMount() {\n    this.getData(this.state.q);\n  }\n  render() {\n    const {error, city, isSearching} = this.state;\n    return (\n      <div class='WeatherD'>\n        <h1>Ultimate Weather App</h1>\n        <br />\n        <br />\n        <Search submitHandler={this.handleSubmit} />\n        <br />\n        {!isSearching ? (<img src={require(\"./loading.gif\")} id=\"load_img\" />) : ([error === '' ? (<WeatherD City={city.name} CountryID={city.sys.country} Weather={city.weather[0].main} WD={city.weather[0].description} Mint={city.main.temp_min} Maxt={city.main.temp_max} Location={city.coord.lon+\", \"+city.coord.lat} />) : (<h1>{error}</h1>)]\n        )}\n      </div>\n    );\n  }\n}\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// @copyRights NajeemB\n"],"sourceRoot":""}